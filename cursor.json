{
    "version": "0.45.14",
    "description": "Built to make you extraordinarily productive, Cursor is the best way to code with AI.",
    "homepage": "https://www.cursor.com/",
    "license": {
        "identifier": "Proprietary",
        "url": "https://www.cursor.com/terms-of-service"
    },
    "notes": [
        "Add Cursor as a context menu option by running:",
        "'reg import \"$dir\\install-context.reg\"'",
        "For file associations, run:",
        "'reg import \"$dir\\install-associations.reg\"'"
    ],
    "architecture": {
        "64bit": {
            "url": "https://downloader.cursor.sh/windows/nsis/x64#/cursor_setup.exe"
        }
    },
    "installer": {
        "script": [
            "Expand-7zipArchive -Path \"$dir\\cursor_setup.exe\" -DestinationPath \"$dir\\extracted\"",
            "Expand-7zipArchive -Path \"$dir\\extracted\\`$PLUGINSDIR\\app-64.7z\" -DestinationPath \"$dir\"",
            "Remove-Item \"$dir\\extracted\", \"$dir\\cursor_setup.exe\" -Recurse -Force"
        ]
    },
    "bin": "Cursor.exe",
    "shortcuts": [
        [
            "Cursor.exe",
            "Cursor"
        ]
    ],
    "post_install": [
        "$dirpath = \"$dir\".Replace('\\', '\\\\')",
        "$exepath = \"$dir\\Cursor.exe\".Replace('\\', '\\\\')",
        "'install-associations', 'uninstall-associations', 'install-context', 'uninstall-context' | ForEach-Object {",
        "  if (Test-Path \"$dir\\$_.reg\") {",
        "    $content = Get-Content \"$dir\\$_.reg\"",
        "    $content = $content.Replace('$codedir', $dirpath)",
        "    $content = $content.Replace('$code', $exepath)",
        "    if ($global) {",
        "      $content = $content.Replace('HKEY_CURRENT_USER', 'HKEY_LOCAL_MACHINE')",
        "    }",
        "    $content | Set-Content -Path \"$dir\\$_.reg\"",
        "  }",
        "}",
        "if (!(Test-Path \"$dir\\data\\extensions\") -and (Test-Path \"$env:USERPROFILE\\.cursor\\extensions\")) {",
        "    info '[Portable Mode] Copying extensions...'",
        "    Copy-Item \"$env:USERPROFILE\\.cursor\\extensions\" \"$dir\\data\" -Recurse",
        "}",
        "if (!(Test-Path \"$dir\\data\\user-data\") -and (Test-Path \"$env:AppData\\Cursor\")) {",
        "    info '[Portable Mode] Copying user data...'",
        "    Copy-Item \"$env:AppData\\Cursor\" \"$dir\\data\\user-data\" -Recurse",
        "}",
        "$extensions_file = \"$dir\\data\\extensions\\extensions.json\"",
        "if ((Test-Path \"$extensions_file\")) {",
        "    info 'Adjusting path in extensions file...'",
        "    (Get-Content \"$extensions_file\") -replace '(?<=cursor(/|\\\\\\\\)).*?(?=(/|\\\\\\\\)data(/|\\\\\\\\)extensions)', $version | Set-Content \"$extensions_file\"",
        "}"
    ],
    "uninstaller": {
        "script": "if ($cmd -eq 'uninstall') { reg import \"$dir\\uninstall-context.reg\" }"
    },
    "persist": "data",
    "checkver": {
        "regex": "(\\S+)",
        "script": [
            "$client = $null",
            "try {",
            "    $client = New-Object System.Net.WebClient",
            "    $client.Headers.Add('User-Agent', 'Mozilla/5.0')",
            "    Write-Host 'Sending request...'",
            "    $headers = $client.OpenRead('https://downloader.cursor.sh/windows/nsis/x64/')",
            "    Write-Host 'Request completed'",
            "    $disposition = $client.ResponseHeaders.Get('Content-Disposition')",
            "    Write-Host \"Content-Disposition: $disposition\"",
            "    if ($disposition -match 'Cursor Setup ([\\d.]+)') {",
            "        Write-Host \"Version found: $($matches[1])\"",
            "        $matches[1]",
            "    } else {",
            "        Write-Host 'No version match found in Content-Disposition'",
            "        Write-Host 'All response headers:'",
            "        $client.ResponseHeaders | Format-List",
            "        $null",
            "    }",
            "} catch {",
            "    Write-Host \"Error occurred: $($_.Exception.Message)\"",
            "    Write-Host \"Error type: $($_.Exception.GetType().Name)\"",
            "    $null",
            "} finally {",
            "    if ($client) {",
            "        $client.Dispose()",
            "    }",
            "}"
        ]
    },
    "autoupdate": {
        "architecture": {
            "64bit": {
                "url": "https://downloader.cursor.sh/windows/nsis/x64/#cursor_setup.exe"
            }
        }
    }
}